//给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。
//对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。
//如果数组中不存在该元素，则返回 -1 -1。

//输入格式
//第一行包含整数 n 和 q，表示数组长度和询问个数。
//第二行包含 n 个整数（均在 1～10000 范围内），表示完整数组。
//接下来 q 行，每行包含一个整数 k，表示一个询问元素。

//输出格式
//共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。
//如果数组中不存在该元素，则返回 -1 -1。

//数据范围
//1≤n≤100000
//1≤q≤10000
//1≤k≤10000

//输入样例：
//6 3
//1 2 2 3 3 4
//3
//4
//5

//输出样例：
//3 4
//5 5
//-1 -1

//***为什么用二分？？ 
//1、已经排好序
//2、查找元素 

//第一遍  2022/03/22
//第二遍  2022/04/08
//第三遍  2022/04/17 
#include <iostream>
using namespace std;
const int N = 1e5+10;
int m,n;
int q[N];
int main()
{
    scanf("%d %d",&m,&n);
    int i;
    for(i=0;i<m;i++) scanf("%d",&q[i]);
    
    while(n--)											//求左端点 
    {
        int x;
        scanf("%d",&x);
        
        int l=0 , r = m-1;								//定义左右区间 ， ***如果是小于 1 的数 要注意区间范围 ，确保二分出来的值在区间内***  
        			
        while(l<r)										//划分区间 
        {
            int mid = l + r >> 1;						//向右二分 不需要加 1 
            if(q[mid] >= x) r = mid;					//满足性质，更新右端点 
            else l = mid + 1;							//否则，更新左区间（由于我们要找的点在 一定不在左区间 因此要加上 1） 
        }
        
        if(q[l] != x) cout << "-1 -1" << endl;			//***二分一定有结果 ，但不一定满足题目要求，因此特判 ，即二分查找的值不等于 x  
        
        else
        {
            cout << l << ' ';							//输出左端点 
            
            int l = 0, r = m - 1;						//定义左右区间 ， ***如果是小于 1 的数 要注意区间范围 ，确保二分出来的值在区间内*** 
            while(l<r)									//划分区间 
            {
                int mid = l + r + 1 >> 1;				//向左二分，加 1 是为了防止死循环 !!!（主要因为 C++ 会下取整 ， 会一直 l = mid ， mid = l） 
                if(q[mid]<=x) l = mid;					//满足性质，更新左端点 
                else r = mid - 1;						//否则，更新右端点（由于我们要找的点 一定不在右区间 因此要减去 1） 
            }
            cout << l << endl;							//输出右端点 
        }
        
    }
    return 0;
}
