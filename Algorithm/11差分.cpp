//输入一个长度为 n 的整数序列。
//接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。
//请你输出进行完所有操作后的序列。

//输入格式
//第一行包含两个整数 n 和 m。
//第二行包含 n 个整数，表示整数序列。
//接下来 m 行，每行包含三个整数 l，r，c，表示一个操作。

//输出格式
//共一行，包含 n 个整数，表示最终序列。

//数据范围
//1≤n,m≤100000,
//1≤l≤r≤n,
//-1000≤c≤1000,
//-1000≤整数序列中元素的值≤1000

//输入样例：
//6 3
//1 2 2 1 2 1
//1 3 1
//3 5 1
//1 6 1

//输出样例：
//3 4 5 3 4 2

//第一遍  2022/04/04
//第二遍  2022/04/22
#include <iostream>
using namespace std;
const int N = 1e5+10;						//PS：假设 a 数组是 b 数组的前缀和数组，反过来我们把 b 数组叫做 a 数组的差分数组 （ b 相当于是 a 的子项） 
int n,m;
int a[N],b[N];								// a 存储每一位数字 ， b 存储差分

void insert(int l,int r,int c)				//插入函数 ，从 l 开始加 c ，从 r+1 开始减 c ，相当于只给 l ~~ r 区间加上 c 
{
    b[l] += c;								// 对 b 数组的 b[l] 的修改，会影响到 a 数组中从 a[l] 及往后的每一个数。 
    b[r+1] -= c;
}

int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)					//差分初始化（下标从 1 开始！！） 
    {
        scanf("%d",&a[i]);
        insert(i,i,a[i]);					//给 b 中插入 a 的初始值 ， 构造差分（让 b 是 a 的子项） , 会给 i 加上 a[i] ，同时给 i 后面的每项减去 a[i] 
    }
    
    while(m--)
    {
        int l,r,c;
        scanf("%d%d%d",&l,&r,&c);
        insert(l,r,c);						//给 l ~~ r 区间加上 c 
    }
    
    for(int i=1;i<=n;i++)
    {
        b[i] +=b[i-1];						//求前缀和 
        printf("%d ",b[i]);
    }
    
    return 0;
}

